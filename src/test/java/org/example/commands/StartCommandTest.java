package org.example.commands;

import org.example.service.UserStateService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.objects.Chat;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.User;
import org.telegram.telegrambots.meta.bots.AbsSender;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class StartCommandTest {

    private Command command;

    @Mock
    private UserStateService userStateService;

    @Mock
    private AbsSender absSender;

    @Mock
    private Message message;

    @Mock
    private User user;

    @Mock
    private Chat chat;

    @BeforeEach
    void setUp(){
        command = new StartCommand(userStateService);
    }


    @Test
    void getCommandName() {
        assertEquals("start",command.getCommandName());
    }

    @Test
    void getDescription() {
        assertEquals("–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",command.getDescription());
    }

    @Test
    void executeCheckReturnableClass() {
        when(message.getFrom()).thenReturn(user);
        when(user.getId()).thenReturn(123L);

        Object result = command.execute(absSender, message);
        assertEquals(SendPhoto.class, result.getClass());
    }

    @Test
    void executeCheckPhotoLink(){
        when(message.getFrom()).thenReturn(user);
        when(user.getId()).thenReturn(1L);

        SendPhoto sendPhoto = (SendPhoto) command.execute(absSender,message);
        assertEquals("https://media.easemytrip.com/media/Blog/International/637007769287754861/637007769287754861GltpKG.jpg",
                sendPhoto.getPhoto().getAttachName());
    }

    @Test
    void executeCheckText(){
        when(message.getFrom()).thenReturn(user);
        when(user.getId()).thenReturn(1L);

        SendPhoto sendPhoto = (SendPhoto) command.execute(absSender,message);
        String expectesCaption = "Ô∏è–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç! üó∫Ô∏è\n" +
                "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—É—Ç—å –≤ –ª—É—á—à–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π!\n\n" +
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n" +
                "/help - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n" +
                "/location - —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–≤–æ–µ–º —Ç–µ–∫—É—â–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏";
        assertEquals(expectesCaption,sendPhoto.getCaption());
    }


}