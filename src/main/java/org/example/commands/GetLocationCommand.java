package org.example.commands;

import org.example.keyboards.LocationKeyboard;
import org.example.apiMethods.YandexMapsClient;
import org.example.service.UserStateService;
import org.example.states.UserState;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.bots.AbsSender;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


public class GetLocationCommand implements Command {

    private final UserStateService userStateService;
    private final YandexMapsClient yandexMapsClient;
    private Map<String,String> locationTriggers;




    public GetLocationCommand(UserStateService userStateService) {
        this.userStateService = userStateService;
        this.yandexMapsClient = new YandexMapsClient();
        this.locationTriggers = new HashMap<>();
        locationTriggers.put("\uD83C\uDF0D –ü—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç","/location");
        //locationTriggers.put("üó∫Ô∏è –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç üèõÔ∏è","/location");
    }



    @Override
    public String getCommandName() {
        return "location";
    }

    @Override
    public String getDescription() {
        return "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–π –≥–æ—Ä–æ–¥ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏";
    }

    @Override
    public SendMessage execute(AbsSender absSender, Message message) {
        Long userId = message.getFrom().getId();

        System.out.println("üìç –ö–æ–º–∞–Ω–¥–∞ location –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + userId);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        userStateService.setUserState(userId, UserState.AWAITING_LOCATION);

        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(message.getChatId().toString());
        sendMessage.setText("üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:");
        LocationKeyboard locationKeyboard = new LocationKeyboard();
        sendMessage.setReplyMarkup(locationKeyboard.createLocationKeyboard());

        try {
            absSender.execute(sendMessage);
            System.out.println("‚úÖ –ó–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: " + userId);
        } catch (TelegramApiException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
        }

        return sendMessage;
    }

    public Map<String, String> getLocationTriggers() {
        return locationTriggers;
    }



    public String getCityFromCoordinates(double latitude, double longitude) throws Exception {
        org.example.apiMethods.YandexMapsClient yandexMapsClient = new org.example.apiMethods.YandexMapsClient();
        String city = yandexMapsClient.getCityName(longitude, latitude);
        System.out.println("üìç –û–ø—Ä–µ–¥–µ–ª–µ–Ω –≥–æ—Ä–æ–¥ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º " + latitude + ", " + longitude + ": " + city);
        return city;
    }
    public String getCityLandmarks(String city) throws Exception {
        System.out.println("üèõÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –¥–ª—è –≥–æ—Ä–æ–¥–∞: " + city);
        String landmarks = yandexMapsClient.getLandmarks(city);
        System.out.println("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: " + landmarks);
        return landmarks;
    }
}