package org.example.handlers;

import org.example.commands.GetLocationCommand;
import org.example.service.UserStateService;
import org.example.states.UserState;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Location;
import org.telegram.telegrambots.meta.bots.AbsSender;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

public class LocationHandler {
    private final UserStateService userStateService;
    private final GetLocationCommand getLocationCommand;

    public LocationHandler(UserStateService userStateService) {
        this.userStateService = userStateService;
        this.getLocationCommand = new GetLocationCommand(userStateService);
    }

    public void handleLocation(Long userId, Long chatId, Location location, AbsSender absSender) {
        double latitude = location.getLatitude();
        double longitude = location.getLongitude();

        try {
            String city = getLocationCommand.getCityFromCoordinates(latitude, longitude);
            handleSuccessfulCityDetection(userId, chatId, city, absSender);
        } catch (Exception e) {
            handleCityDetectionError(userId, chatId, e, absSender);
        }
    }

    public void handleTextLocation(Long userId, Long chatId, String text,
                                   UserState currentState, AbsSender absSender) {
        switch (currentState) {
            case AWAITING_LOCATION:
                if (text.equals("\uD83D\uDC49 –≤–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é")) {
                    handleTextCityRequest(userId, chatId, absSender);
                } else {
                    handleTextCityInput(userId, chatId, text, absSender);
                }
                break;
            case AWAITING_MANUAL_CITY:
                handleTextCityInput(userId, chatId, text, absSender);
                break;
        }
    }

    private void handleTextCityRequest(Long userId, Long chatId, AbsSender absSender) {
        userStateService.setUserState(userId, UserState.AWAITING_MANUAL_CITY);
        sendMessage(chatId, "üèôÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:", absSender);
    }

    private void handleTextCityInput(Long userId, Long chatId, String cityName, AbsSender absSender) {
        try {
            // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ API
            handleSuccessfulCityDetection(userId, chatId, cityName, absSender);
        } catch (Exception e) {
            handleCityInputError(chatId, absSender);
        }
    }

    private void handleSuccessfulCityDetection(Long userId, Long chatId, String city, AbsSender absSender) {
        userStateService.getUserData(userId).setCurrentCity(city);
        userStateService.setUserState(userId, UserState.AWAITING_DESTINATION_CITY);

        String message = "üìç –û—Ç–ª–∏—á–Ω–æ! –í–∞—à –≥–æ—Ä–æ–¥: " + city +
                "\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–µ—Ö–∞—Ç—å:";
        sendMessage(chatId, message, absSender);
    }

    private void handleCityDetectionError(Long userId, Long chatId, Exception error, AbsSender absSender) {
        System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: " + error.getMessage());
        userStateService.setUserState(userId, UserState.AWAITING_MANUAL_CITY);
        sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ –≤–∞—à–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é:", absSender);
    }

    private void handleCityInputError(Long chatId, AbsSender absSender) {
        System.err.println("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ (—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ç–∞–∫–æ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)");
        sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –≤–≤–æ–¥–µ –≥–æ—Ä–æ–¥–∞. " +
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–≤–æ–¥–æ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏", absSender);
    }

    private void sendMessage(Long chatId, String text, AbsSender absSender) {
        SendMessage response = new SendMessage();
        response.setChatId(chatId.toString());
        response.setText(text);

        try {
            absSender.execute(response);
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
        }
    }
}