package org.example.handlers;

import org.example.commands.GetLocationCommand;
import org.example.keyboards.LastKeyboard;
import org.example.service.UserStateService;
import org.example.states.UserState;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.bots.AbsSender;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

public class RouteHandler {
    private final UserStateService userStateService;
    private final GetLocationCommand getLocationCommand;

    public RouteHandler(UserStateService userStateService) {
        this.userStateService = userStateService;
        this.getLocationCommand = new GetLocationCommand(userStateService);
    }

    public void handleDestinationCity(Message message, AbsSender absSender) {
        Long userId = message.getFrom().getId();
        Long chatId = message.getChatId();
        String destinationCity = message.getText();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        userStateService.getUserData(userId).setDestinationCity(destinationCity);
        userStateService.setUserState(userId, UserState.READY_TO_SEARCH);

        String currentCity = userStateService.getUserData(userId).getCurrentCity();
        sendRouteInfo(chatId, currentCity, destinationCity, absSender);
    }

    private void sendRouteInfo(Long chatId, String currentCity, String destinationCity, AbsSender absSender) {
        try {
            String landmarks = getLocationCommand.getCityLandmarks(destinationCity);
            String routeInfo = buildRouteMessage(currentCity, destinationCity, landmarks);
            sendMessageWithKeyboard(chatId, routeInfo, absSender);
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π: " + e.getMessage());
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
            String fallbackMessage = buildFallbackRouteMessage(currentCity, destinationCity);
            sendMessageWithKeyboard(chatId, fallbackMessage, absSender);
        }
    }

    private String buildRouteMessage(String currentCity, String destinationCity, String landmarks) {
        return String.format(
                "üéâ –û—Ç–ª–∏—á–Ω–æ! –ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω:\nüìç –û—Ç: %s\nüéØ –î–æ: %s\n\nüèõÔ∏è –í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–æ—Ä–æ–¥–∞ %s:\n%s",
                currentCity, destinationCity, destinationCity, landmarks
        );
    }

    private String buildFallbackRouteMessage(String currentCity, String destinationCity) {
        return String.format(
                "üéâ –û—Ç–ª–∏—á–Ω–æ! –ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω:\nüìç –û—Ç: %s\nüéØ –î–æ: %s\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –º–µ—Å—Ç–∞ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è –≤ %s!",
                currentCity, destinationCity, destinationCity
        );
    }

    private void sendMessageWithKeyboard(Long chatId, String text, AbsSender absSender) {
        SendMessage response = new SendMessage();
        response.setChatId(chatId.toString());
        response.setText(text);
        response.setReplyMarkup(new LastKeyboard().createStartKeyboard());

        try {
            absSender.execute(response);
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
        }
    }
}