package org.example;

import org.example.keyboards.LocationKeyboard;
import org.example.commands.HelpCommand;
import org.example.commands.StartCommand;
import org.example.commands.Command;
import org.example.commands.GetLocationCommand;
import org.example.service.UserStateService;
import org.example.states.UserState;

import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Location;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.User;
import org.telegram.telegrambots.meta.bots.AbsSender;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.HashMap;
import java.util.Map;

import static org.example.states.UserState.*;

public class MessageHandler {

    private final Map<String, Command> commands = new HashMap<>();
    private final UserStateService userStateService = new UserStateService();
    private final GetLocationCommand getLocationCommand = new GetLocationCommand(userStateService);

    public MessageHandler() {
        registerCommands();
    }

    private void registerCommands() {
        Command startCommand = new StartCommand(userStateService);
        commands.put(startCommand.getCommandName(), startCommand);

        Command helpCommand = new HelpCommand(commands);
        commands.put(helpCommand.getCommandName(), helpCommand);

        commands.put(getLocationCommand.getCommandName(), getLocationCommand);

        System.out.println("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–æ–º–∞–Ω–¥—ã: " + commands.keySet());
    }

    public void handleLocation(Update update, AbsSender absSender) {
        Message message = update.getMessage();
        User user = message.getFrom();
        Long userId = user.getId();

        UserState currentState = userStateService.getUserState(userId);

        // –∑–¥–µ—Å—å –º—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –≥–µ–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (message.hasLocation()) {
            handleLocationInput(userId, message.getChatId(), message.getLocation(), absSender);
        }
        // –∑–¥–µ—Å—å –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥–∏–º—ã–π –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é
        else if (message.hasText()) {
            handleTextLocationInput(userId, message.getChatId(), message.getText(), currentState, absSender);
        }
    }

        private void handleLocationInput(Long userId, Long chatId, Location location, AbsSender absSender){
            double latitude = location.getLatitude();
            double longitude = location.getLongitude();
            try {
                String city = getLocationCommand.getCityFromCoordinates(latitude, longitude);
                handleSuccessfulCityDetection(userId, chatId, city, absSender);
            } catch (Exception e){
                handleCityDetectionError(userId, chatId, e, absSender);
            }
        }

        private void handleTextLocationInput(Long userId, Long chatId, String text,
                                             UserState currentState, AbsSender absSender){
        /*
        –∑–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ—Å—Ç–∞—è: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç —Å—Ä–∞–∑—É –∏–ª–∏ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
        –Ω–∞ –∫–Ω–æ–ø–∫—É, –æ–±–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±—É–¥—É—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∏ –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –ø–æ–≤–ª–∏—è—é—Ç
         */
        switch (currentState){
            case AWAITING_LOCATION:
                if (text.equals("\uD83D\uDC49 –≤–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é")){
                    handleTextCityRequest(userId, chatId, absSender);
                }
                else {
                    handleTextCityInput(userId, chatId, text, absSender);
                }
                break;
            case AWAITING_MANUAL_CITY:
                handleTextCityInput(userId, chatId, text, absSender);
                break;
        }
        }
        private void handleTextCityRequest(Long userId, Long chatId, AbsSender absSender){
        userStateService.setUserState(userId, UserState.AWAITING_MANUAL_CITY);

        SendMessage response = new SendMessage();
        response.setChatId(chatId.toString());
        response.setText("üèôÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:");
        try{
            absSender.execute(response);
        } catch (TelegramApiException e){
            System.err.println("—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å, " + e.getMessage());
        }
        }

        private void handleTextCityInput(Long userId, Long chatId, String cityName, AbsSender absSender){
        try{

            // –∑–¥–µ—Å—å –¥–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥ –≤ –∞–ø–∏ –∏–ª–∏ –Ω–µ—Ç

            handleSuccessfulCityDetection(userId, chatId, cityName, absSender);
        } catch (Exception e){
            System.err.println("–æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ (—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ç–∞–∫–æ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)");
            SendMessage errResponse = new SendMessage();
            errResponse.setChatId(chatId.toString());
            errResponse.setText("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –≤–≤–æ–¥–µ –≥–æ—Ä–æ–¥–∞. " +
                    "–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–≤–æ–¥–æ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏");
            try {
                absSender.execute(errResponse);
            } catch (TelegramApiException ex){
                System.err.println("–Ω—É –µ—Å–ª–∏ –¥–∞–∂–µ —ç—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è.." + ex.getMessage());
            }
        }
        }

        private void handleSuccessfulCityDetection(Long userId, Long chatId, String city, AbsSender absSender) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        userStateService.getUserData(userId).setCurrentCity(city);

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é - –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        userStateService.setUserState(userId, AWAITING_DESTINATION_CITY);

        SendMessage response = new SendMessage();
        response.setChatId(chatId.toString());
        response.setText("üìç –û—Ç–ª–∏—á–Ω–æ! –í–∞—à –≥–æ—Ä–æ–¥: " + city +
                "\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–µ—Ö–∞—Ç—å:");

        try {
            absSender.execute(response);
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
        }
    }

    private void handleCityDetectionError(Long userId, Long chatId, Exception error, AbsSender absSender) {
        System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: " + error.getMessage());

        SendMessage errorResponse = new SendMessage();
        errorResponse.setChatId(chatId.toString());
        errorResponse.setText("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ –≤–∞—à–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é:");

        userStateService.setUserState(userId, UserState.AWAITING_MANUAL_CITY);

        try {
            absSender.execute(errorResponse);
        } catch (TelegramApiException ex) {
            System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: " + ex.getMessage());
        }
    }
    private void handleFSM(Message message, AbsSender absSender) {
        Long userId = message.getFrom().getId();
        UserState currentState = userStateService.getUserState(userId);
        String text = message.getText();

        if (currentState == AWAITING_LOCATION || currentState == AWAITING_MANUAL_CITY) {
            handleTextLocationInput(userId, message.getChatId(), text, currentState, absSender);
            return;
        }

        if (currentState == AWAITING_DESTINATION_CITY) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            userStateService.getUserData(userId).setDestinationCity(text);
            userStateService.setUserState(userId, UserState.READY_TO_SEARCH);

            String currentCity = userStateService.getUserData(userId).getCurrentCity();

            try {
                String landmarks = getLocationCommand.getCityLandmarks(text);

                String routeInfo = String.format(
                        "üéâ –û—Ç–ª–∏—á–Ω–æ! –ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω:\nüìç –û—Ç: %s\nüéØ –î–æ: %s\n\nüèõÔ∏è –í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–æ—Ä–æ–¥–∞ %s:\n%s",
                        currentCity, text, text, landmarks
                );

                SendMessage response = new SendMessage();
                response.setChatId(message.getChatId().toString());
                response.setText(routeInfo);
                absSender.execute(response);
            } catch (Exception e) {
                System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π: " + e.getMessage());

                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –Ω–∏—Ö
                String routeInfo = String.format(
                        "üéâ –û—Ç–ª–∏—á–Ω–æ! –ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω:\nüìç –û—Ç: %s\nüéØ –î–æ: %s\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –º–µ—Å—Ç–∞ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è –≤ %s!",
                        currentCity, text, text
                );

                SendMessage response = new SendMessage();
                response.setChatId(message.getChatId().toString());
                response.setText(routeInfo);

                try {
                    absSender.execute(response);
                } catch (TelegramApiException ex) {
                    System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: " + ex.getMessage());
                }
            }
        }

    }

    public void handleMessage(Message message, AbsSender absSender) {
        String text = message.getText();
        User user = message.getFrom();
        Long userId = user.getId();

        if (text.startsWith("/")) {
            String commandName = text.substring(1).toLowerCase();
            Command command = commands.get(commandName);

            if (command != null) {
                System.out.println("   üîß –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞: /" + commandName);
                command.execute(absSender, message);
            } else {
                System.out.println("   ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: /" + commandName);
                sendUnknownCommand(message, absSender);
            }
        } else {
            System.out.println("   üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ FSM");
            handleFSM(message, absSender);
        }
    }



    private void sendUnknownCommand(Message message, AbsSender absSender) {
        try {
            SendMessage response = new SendMessage();
            response.setChatId(message.getChatId().toString());
            response.setText("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.");
            absSender.execute(response);
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: " + e.getMessage());
        }
    }

    public Map<String, Command> getCommands() {
        return commands;
    }
}